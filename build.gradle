plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id "com.bmuschko.docker-remote-api" version "4.6.2"    	
}

apply from: "$rootDir/gradle/versioning.gradle"

group = 'ch.so.agi'
sourceCompatibility = '1.8'
//targetCompatibility = '1.8'

ext {
    apacheCamelVersion = "2.24.2"
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "http://jars.interlis.ch" }	
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'	
    implementation "org.apache.camel:camel-ftp:${apacheCamelVersion}"	
    implementation "org.apache.camel:camel-spring-boot-starter:${apacheCamelVersion}"
    implementation "org.apache.camel:camel-zipfile:${apacheCamelVersion}"
    implementation "org.apache.camel:camel-aws:${apacheCamelVersion}"
    implementation "org.apache.camel:camel-sql:${apacheCamelVersion}"
    implementation "ch.interlis:ili2pg:4.3.1"    
    implementation "ch.interlis:ilivalidator:1.11.3"
    implementation "ch.ehi:ehibasics:1.2.0"
    implementation 'com.rometools:rome:1.12.0'    

    runtimeOnly 'org.postgresql:postgresql'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.0'	
}

// Build Docker image
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

docker {
    registryCredentials {
        username = System.env.DOCKER_USERNAME
        password = System.env.DOCKER_PASSWORD
    }
}

task buildDockerImage(type: DockerBuildImage) {
    description = "Build docker image."
    inputDir = project.projectDir
    tags = ["sogis/gb2av:"+ version, "sogis/gb2av:latest"]
    labels = ["gb2av.created": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), 
            "gb2av.git_commit":  getCheckedOutGitCommitHash(), 
            "gb2av.travis_build": version]
}

task pushDockerImage_One(type: DockerPushImage) {
    description = "Push docker image to hub.docker.com (images are UNTESTED)."
    imageName = buildDockerImage.tags.get().toArray()[0]
}

task pushDockerImage_Two(type: DockerPushImage) {
    description = "Push docker image to hub.docker.com (images are UNTESTED)."
    imageName = buildDockerImage.tags.get().toArray()[1]
}

task pushDockerImages() {
    description = "Collect all push images tasks."
}

pushDockerImages.dependsOn {
    tasks.findAll { task -> task.name.startsWith('pushDockerImage_') }
}

import java.text.SimpleDateFormat

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}

// Create a static text file with same meta information as the docker labels
task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${getTimestamp()}
Application-name: gb2av
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/static/"
}
copyVersionTxt.dependsOn(versionTxt)
build.dependsOn(copyVersionTxt)
classes.dependsOn(copyVersionTxt)

