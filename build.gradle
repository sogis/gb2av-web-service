plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.springframework.experimental.aot' version '0.12.0'
}

apply from: "$rootDir/gradle/versioning.gradle"

group = 'ch.so.agi'
description = """ gb2av-web-service """

sourceCompatibility = '11'
targetCompatibility = '11'

compileJava {
    options.compilerArgs.addAll(['--release', '11'])
}

bootJar {
   archiveName = baseName + "-" + version + "-exec.jar"
}

ext {
    apacheCamelVersion = "3.17.0"
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    implementation {
        exclude(group: 'com.fasterxml.jackson.core', module: 'jackson-databind')
    }
    
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

repositories {
    maven { url 'https://repo.spring.io/release' }
    mavenCentral()
    maven { url "https://jars.interlis.ch" }	
}

dependencies {
    //implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation ('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'	
    
    implementation platform("org.apache.camel.springboot:camel-spring-boot-bom:${apacheCamelVersion}")
    implementation "org.apache.camel.springboot:camel-spring-boot-starter"
    implementation "org.apache.camel.springboot:camel-stream-starter"
    
    implementation "org.apache.camel:camel-ftp:${apacheCamelVersion}"	
    implementation "org.apache.camel:camel-zipfile:${apacheCamelVersion}"
    implementation "org.apache.camel:camel-aws2-s3:${apacheCamelVersion}"
    implementation "org.apache.camel:camel-sql:${apacheCamelVersion}"
    implementation "ch.interlis:ili2pg:4.3.1"    
    implementation "ch.interlis:ilivalidator:1.11.3"
    implementation "ch.ehi:ehibasics:1.2.0"
    implementation 'com.rometools:rome:1.12.0'    

    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.2'   

    runtimeOnly 'org.postgresql:postgresql'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'    
    testImplementation 'org.apache.camel:camel-test-spring-junit5'
}

tasks.named('test') {
    useJUnitPlatform()
}

springAot {
    //mode = org.springframework.aot.gradle.dsl.AotMode.NATIVE_AGENT
    debugVerify = false
    verify = true
}

nativeBuild {
    verbose = true
    fallback = false
    buildArgs.add("--libc=musl")
    buildArgs.add("--static")
}

import java.text.SimpleDateFormat

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}

task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${getTimestamp()}
Application-name: gb2av
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/static/"
}
copyVersionTxt.dependsOn(versionTxt)
build.dependsOn(copyVersionTxt)
classes.dependsOn(copyVersionTxt)

