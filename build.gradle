plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'org.graalvm.buildtools.native' version '0.9.23'
}

group = 'ch.so.agi'
description = """ gb2av-web-service """

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

compileJava {
    options.compilerArgs.addAll(['--release', '17'])
}

bootJar {
   archiveFileName = archiveBaseName.get() + "-" + version + "-exec.jar"
}

ext {
    apacheCamelVersion = "4.0.0"  
}

repositories {
    mavenCentral()
    maven { url "https://jars.interlis.ch" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation "org.apache.camel.springboot:camel-spring-boot-starter:${apacheCamelVersion}"

    implementation "org.apache.camel:camel-ftp:${apacheCamelVersion}"	
    implementation "org.apache.camel:camel-zipfile:${apacheCamelVersion}"
    implementation "org.apache.camel:camel-aws2-s3:${apacheCamelVersion}"
    implementation "org.apache.camel:camel-sql:${apacheCamelVersion}"
    implementation "ch.interlis:ili2pg:4.11.0"    
    implementation "ch.interlis:ilivalidator:1.13.3"
    implementation "ch.ehi:ehibasics:1.4.1"
    implementation 'com.rometools:rome:1.18.0' // 2.1 available

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

import java.text.SimpleDateFormat

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}

task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${getTimestamp()}
Application-name: gb2av
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/static/"
}
copyVersionTxt.dependsOn(versionTxt)
build.dependsOn(copyVersionTxt)
classes.dependsOn(copyVersionTxt)