import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import de.undercouch.gradle.tasks.download.Download
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import static java.nio.file.StandardCopyOption.*


apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

ext {
    pathToTempFolder = System.getProperty("java.io.tmpdir")
    pathToUnzipFolder = Paths.get(pathToTempFolder, 'unzip_data')

    iliModelCadastralSurveying = "DM01AVSO24LV95"
    dbSchemaCadastralSurveying = "agi_dm01avso24"
    cadastralSurveyingBaseUrl = "https://s3.eu-central-1.amazonaws.com/ch.so.agi.av.dm01avso24lv95/"
    //cadastralSurveyingDataSets = ["2546", "2405", "2408", "2456", "2457", "2473", "2474", "2475", "2476", "2498", "2501", "2502", "2580", "2613", "2614", "2615"]
    cadastralSurveyingDataSets = [2401,2402,2403,2404,2405,2406,2407,2408,2421,2422,2423,2424,2425,2426,2427,2428,2429,2445,2455,2456,2457,2461,2463,2464,2465,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2491,2492,2493,2495,2497,2498,2499,2500,2501,2502,2503,2511,2513,2514,2516,2517,2518,2519,2520,2523,2524,2525,2526,2527,2528,2529,2530,2532,2534,2535,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2553,2554,2555,2556,2571,2572,2573,2574,2575,2576,2578,2579,2580,2581,2582,2583,2584,2585,2586,2601,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622]

    iliModelAdminEinteilung = "SO_AGI_AV_GB_Administrative_Einteilungen_20180613"
    dbSchemaAdminEinteilung = "agi_av_gb_admin_einteilung"
}    

task createSchemaCadastralSurveying(type: SqlExecutor){
    database = [dbUriEdit, "admin", "admin"]
    sqlFiles = ['dm01avso24/prescript.sql','dm01avso24/agi_dm01avso24.sql','dm01avso24/postscript.sql']
}

task createSchemaAdminEinteilung(type: SqlExecutor){
    database = [dbUriEdit, "admin", "admin"]
    sqlFiles = ['administrative_einteilungen/prescript.sql','administrative_einteilungen/agi_av_gb_admin_einteilung.sql','administrative_einteilungen/postscript.sql']
}

task importAdminEinteilung(type: Ili2pgImport) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelAdminEinteilung
    dbschema = dbSchemaAdminEinteilung
    dataFile = file("administrative_einteilungen/administrative_einteilungen.xtf")
    disableValidation = true
}

cadastralSurveyingDataSets.each { cadastralSurveyingDataSet ->
    def dataSet = cadastralSurveyingDataSet.toString()
    task "downloadCadastralSurveyingData_$dataSet"(type: Download) {
        description = "Download AV-Datensatz: ${dataSet}"
        src cadastralSurveyingBaseUrl + dataSet + "00.zip"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }

    task "unzipCadastralSurveyingData_$dataSet"(type: Copy, dependsOn: "downloadCadastralSurveyingData_$dataSet") {
        description = "Unzip heruntergeladene Daten"
        from zipTree(Paths.get(pathToTempFolder, dataSet + "00.zip"))
        into file(pathToUnzipFolder)
        include "**/*.itf"
        include "**/*.ITF"

        doLast {
            try {
                Path yourFile = Paths.get(pathToUnzipFolder.toString()+"/"+dataSet.toString()+"00.ITF");
                Files.move(yourFile, yourFile.resolveSibling(dataSet+"00.itf"));
            } catch (Exception e) {}

            println "File unzipped to directory: " + pathToUnzipFolder
        }    
    }

    task "replaceCadastralSurveyingData_$dataSet"(type: Ili2pgReplace, dependsOn: "unzipCadastralSurveyingData_$dataSet") {
        description = "Import AV-Datensatz: ${dataSet}"
        database = [dbUriEdit, dbUserEdit, dbPwdEdit]
        models = iliModelCadastralSurveying
        dbschema = dbSchemaCadastralSurveying
        dataFile = file(Paths.get(pathToUnzipFolder.toString(), dataSet + "00.itf"))
        //topics = "DM01AVCH24LV95D.Liegenschaften;DM01AVCH24LV95D.Gemeindegrenzen;DM01AVCH24LV95D.Gebaeudeadressen"
        dataset = dataSet
        disableValidation = true

        doLast {
            println "Data imported into db: " + dbUriEdit
        }        
    }
}

task replaceCadastralSurveyingData() {
    description = "Aggregationstask für das Importieren/Ersetzen sämtlicher AV-Daten."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('replaceCadastralSurveyingData_') }
    }    
}

